/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_ita.h"

 #define DEFAULT 0
 #define FN  1

/ {
    behaviors {
        one: one {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_EXCL>, <&kp N1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        two: two {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_LBRC>, <&kp N2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        thr: thr {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_LBKT>, <&kp N3>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        four: four {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_LPAR>, <&kp N4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        five: five {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_PERC>, <&kp N5>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        six: six {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_CARET>, <&kp N6>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sev: sev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_RPAR>, <&kp N7>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eig: eig {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_RBKT>, <&kp N8>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        nine: nine {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_RBRC>, <&kp N9>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zero: zero {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_EQL>, <&kp N0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ee: ee {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_EGRV>, <&kp IT_EACU>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ao: ao {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_AGRV>, <&kp IT_OGRV>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ud_min: underscore_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_UNDER>, <&kp IT_IGRV>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qts: quotes {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_SQUOT>, <&kp IT_AGRV>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        scl: col_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_SCOL>, <&kp IT_COL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        }; 

        slqst: slash_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_FSLH>, <&kp IT_QUES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmin: comma_minor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp IT_LESS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dmaj: dot_major {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp IT_GREAT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minp: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_MINUS>, <&kp IT_OGRV>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bkt: back_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_BKTK>, <&kp IT_TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        bsp: backslash_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp IT_BSLH>, <&kp IT_PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

    };
};

/ {
    macros {
    
        l_crly: left_curly_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT >
                , <&macro_tap &kp LBKT>
                , <&macro_release &kp LSHFT>
                ;
        };

        r_crly: right_curly_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT >
                , <&macro_tap &kp RBKT>
                , <&macro_release &kp LSHFT>
                ;
        };

    };
};

/ {
       keymap {
              compatible = "zmk,keymap";

              default_layer {

// ---------------------------------------------------------------------------------------------------------------------------------
// | ESC  |  ! 1 |  { 2 |  [ 3 |  ( 4 |  % 5 |                                                                                              |  ^ 6 |  ) 7 |  ] 8 |  } 9 |  = 0 | BSPC |
// | TAB  |  Q   |  W   |  E   |  R   |  T   |                                                                                              |  Y   |  U   |  I   |  O   |  P   | é è  |
// |  +   |  A   |  S   |  D   |  F   |  G   |                                                                                              |  H   |  J   |  K   |  L   |  : ; | ' "  |
// | CMD  |  Z   |  X   |  C   |  V   |  B   |      | CTL  |  @   |                                                 |      | CTL  |            N   |  M   |  , < |  . > |  / ? | à ò  |
//        |  ` ~ |  \ | |  #   |  $   |        SHFT | FN1  | OPT  |                                                 | OPT  | ENT+opt | SPC         |  &   |  *   |  - ù |  _ ì |
//                                                         | CMD  |                                                 | CMD  |


                     bindings = <
      &kp ESC      &one    &two    &thr        &four       &five                                                                               &six      &sev       &eig       &nine      &zero     &kp BSPC
      &kp TAB      &kp Q   &kp W   &kp E       &kp R       &kp T                                                                               &kp Y     &kp U      &kp I      &kp O      &kp P     &ee
      &kp IT_PLUS  &kp A   &kp S   &kp D       &kp F       &kp G                                                                               &kp H     &kp J      &kp K      &kp L      &scl      &qts
      &kp LGUI     &kp Z   &kp X   &kp C       &kp V       &kp B               &kp LCTRL &kp IT_AT     &none     &kp RCTRL                     &kp N     &kp M      &cmin      &dmaj      &slqst    &ao
                   &bkt    &bsp    &kp IT_HASH &kp IT_USD          &kp LSHIFT  &tog 1    &kp LALT      &kp RALT  &mt RALT ENTER  &kp SPACE               &kp IT_AND &kp IT_AST &minp      &ud_min
                                                                                         &kp LGUI      &kp RGUI
                     >;
              };
              fn_layer {

// ---------------------------------------------------------------------------------------------------------------------------------
// |BT_CLR|      |      |      |      |      |                                                                                                   |      |      |      |      |      |      |
// |      |  F1  |  F2  |  F3  |  F4  |      |                                                                                                   |      |      | up   |      |      |      |
// |      |  F5  |  F6  |  F7  |  F8  |      |                                                                                                   |      |  lf  | dw   |  rg  |      |      |
// |      |  F9  |  F10 |  F11 |  F12 |      |      |      |      |                                                         |      |      |      |      |      |      |      |      |      |
//        |      |      |      |      |      |      |  FN1 |      |                                                         |      |      |      |      |      |      |      |      |
//                                                         |      |                                                         |      |


                     bindings = <
        &bt BT_CLR   &trans      &trans       &trans      &trans       &trans                                                                       &trans        &trans       &trans       &trans     &trans   &trans
        &trans       &kp F1      &kp F2       &kp F3      &kp F4       &trans                                                                       &trans        &trans       &kp UP       &trans     &trans   &trans
        &trans       &kp F5      &kp F6       &kp F7      &kp F8       &trans                                                                       &trans        &kp LEFT     &kp DOWN     &kp RIGHT  &trans   &trans
        &trans       &kp F9      &kp F10      &kp F11     &kp F12      &trans              &trans    &trans        &trans    &trans                 &trans        &trans       &trans       &trans     &trans   &trans
                     &trans      &trans       &trans      &trans                 &trans    &trans    &trans        &trans    &trans    &trans                     &trans       &trans       &trans     &trans
                                                                                                     &trans        &trans
                     >;
              };

    };
};
